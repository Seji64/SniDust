function string.starts(String, Start)
    return string.sub(String, 1, string.len(Start)) == Start
end

function trim(s)
    return s:match "^%s*(.*%S)" or ""
end

function ReloadCerts(dq)
    infolog("[INFO] [SniDust] Reloading certs...")

    -- prevent the query from going upstream
    dq.dh:setQR(true)

    -- load
    reloadAllCertificates()

    infolog("[INFO] [SniDust] Certs reloaded!")

    -- respond with a local address just in case
    return DNSAction.Spoof, "127.0.0.7"
end

-- read all the domains in a set
function LoadBlocklists(smn, folder)
    f = io.popen('/bin/ls ' .. folder .. '*.lst')
    for file in f:lines() do
        infolog ("[INFO] [SniDust] *** Domain List: ".. file .. "***")
        local f = io.open(file, "r")
        if f ~= nil then
            for domain in io.lines(file) do
                -- trim string
                domain = trim(domain)
                -- check if domain is valid
                if domain ~= nil and string.len(domain) > 0 and not string.starts(domain, "#") then
                    local parseTest = pcall(newDNSName, domain)
                    if parseTest then
                        smn:add(newDNSName(domain))
                        infolog("[INFO] [SniDust] Adding domain " .. domain .. " to list")
                    else
                        warnlog("[WARN] [SniDust] Failed to parse/add domain " .. domain .. " => Skipping")
                    end
                end
            end
            io.close(f)
        else
            errlog("[ERROR] [SniDust] The domain list is missing or inaccessible!")
        end
        infolog ("[INFO] [SniDust] *** End of Domain List ***")
    end
end

function ReloadBlocklist(dq)
    infolog("[INFO] [SniDust] Reloading domain lists...")

    -- prevent the query from going upstream
    dq.dh:setQR(true)

    BlockNode = newSuffixMatchNode()

    -- load
    LoadBlocklists(BlockNode, "/etc/snidust/domains.d/")

    infolog("[INFO] [SniDust] Domain Lists reloaded!")

    -- respond with a local address just in case
    return DNSAction.Spoof, "127.0.0.7"
end

function ReloadACL(dq)
    -- prevent the query from going upstream
    dq.dh:setQR(true)

    infolog("[INFO] [SniDust] *** Reloading ACL... ***")
    os.execute("/bin/bash -c /generateACL.sh && /usr/sbin/nginx -s reload")
    setACLFromFile("/etc/dnsdist/allowedClients.acl")
    infolog("[INFO] [SniDust] *** ACL reload complete! ***")

    -- respond with a local address just in case
    return DNSAction.Spoof, "127.0.0.7"
end

BlockNode = newSuffixMatchNode()

infolog("[INFO] [SniDust] *** Loading Domain Lists... ***")
LoadBlocklists(BlockNode, "/etc/snidust/domains.d/")
infolog("[INFO] [SniDust] *** Complete! ***")
